what are the IPC mechanisms used in Linux ?
Pipes
Message Queues
Shared Memory
Sockets


Storage Class
array
pointer
strings
bitwise operators
pointers
function pointers
recursion
preprocssor
structrues and unions
linked list 
BST

What are local static variables? What is their use?
Ans:A local static variable is a variable whose lifetime doesn’t end with a function call
 where it is declared. It extends for the lifetime of complete program. All calls to the 
 function share the same copy of local static variables. Static variables can be used 
 to count the number of times a function is called. Also, static variables get the default
 value as 0. For example, the following program prints “0 1”
 
can we return the pointer to a local static variable from a  function ?
Ans: yes we can return the pointer to a local static variable,but the function become non-reentrant.


What are static functions? What is their use?
Ans:In C, functions are global by default. The “static” keyword before a function name makes it static.
 Unlike global functions in C, access to static functions is restricted to the file where they are declared.
 Therefore, when we want to restrict access to functions, we make them static. Another reason for making 
 functions static can be reuse of the same function name in other files.
 
 What is the difference between array and pointer?
 Ans: Behavior of sizeof operator
      though array name is pointer it cannot be assigend with any other address 
	  while a pointer variable can be assigned with the another pointer.

How to implemet Your Own sizeof
unction implementation cannot be done in C as C doesn’t support function overloading and sizeof()
is supposed to receive parameters of all data types.
#define my_sizeof(type) (char *)(&type+1)-(char*)(&type)
int main()
{
    double x;
    printf("%d", my_sizeof(x));
    getchar();
    return 0;
}


How to count set bits in a floating point number in C? This should work for both positive/negaive and floating point numbers ?
Ans: The idea is to take address of the given floating point number in a pointer variable,
typecast the pointer to char * type and process individual bytes one by one. 
We can easily count set bits in a char using the techniques discussed here.

#include <stdio.h>

// A utility function to count set bits in a char.
// Refer http://goo.gl/eHF6Y8 for details of this function.
unsigned int countSetBitsChar(char n)
{
	unsigned int count = 0;
	while (n)
	{
	n &= (n-1);
	count++;
	}
	return count;
}

// Returns set bits in binary representation of x
unsigned int countSetBitsFloat(float x)
{
	// Count number of chars (or bytes) in binary representation of float
	unsigned int n = sizeof(float)/sizeof(char);

	// typcast address of x to a char pointer
	char *ptr = (char *)&x; 

	int count = 0; // To store the result
	for (int i = 0; i < n; i++)
	{
		count += countSetBitsChar(*ptr);
		ptr++;
	}
	return count;
}

// Driver program to test above function
int main()
{
	float x = 0.15625;
	printf ("Binary representation of %f has %u set bits ", x,
			countSetBitsFloat(x));
	return 0;
}


how to count the number of bits set in a number ?
#include <stdio.h>       
 
/* Function to get no of set bits in binary
   representation of positive integer n */
unsigned int countSetBits(unsigned int n)
{
  unsigned int count = 0;
  while (n)
  {
    count += n & 1;
    n >>= 1;
  }
  return count;
}
 
/* Program to test function countSetBits */
int main()
{
    int i = 9;
    printf("%d", countSetBits(i));
    return 0;
}

how to find the Position of rightmost set bit ?
Algorithm: (Example 18(010010))
Let I/P be 12 (1100)

1. Take two's complement of the given no as all bits are reverted
except the first '1' from right to left (10111)

2  Do an bit-wise & with original no, this will return no with the
required one only (00010)

3  Take the log2 of the no, you will get position -1 (1)

4  Add 1 (2)
Example:
unsigned int getFirstSetBitPos(int n)
{
   return log2(n&-n)+1;
}



what is 1s and 2s compliment ?
1’s complement of a binary number is another binary number obtained 
by toggling all bits in it, i.e., transforming the 0 bit to 1 and the 1 bit to 0.
2’s complement of a binary number is 1 added to the 1’s complement of the binary number.


How to identify a fibinary/sparse number ?
given a number N, it is fibinary if there are no consecutive ones in the binary representation.
The idea to do this is to right shift the number, till n!=0. For every binary representation of 1,
 check if the last bit found was 1 or not. Get the last bit of binary representation of the integer
 by doing a (n&1). If the last bit of the binary representation is 1 and the previous bit 
 before doing a right shift was also one, we encounter consecutive 1’s. 
 So we come to the conclusion that it is not a fibonnary number.
bool checkFibinnary(int n) 
{
    // stores the previous last bit
    // initially as 0
    int prev_last = 0;
    
    while (n) 
    {
        // if current last bit and 
        // previous last bit is 1
        if ((n & 1) && prev_last)
            return false;
     
        // stores the last bit
        prev_last = n & 1;
     
        // right shift the number
        n >>= 1;
    }
 
    return true;
}

how to find the average of two numners without using division ?
Add the numbers and right shift by 1.

Do a Left rotate and right rotate of bits in a number ?
Bit Rotation: A rotation (or circular shift) is an operation similar to shift except 
that the bits that fall off at one end are put back to the other end.
In left rotation, the bits that fall off at left end are put back at right end.
In right rotation, the bits that fall off at right end are put back at left end.
#include<stdio.h>
#define INT_BITS 32

/*Function to left rotate n by d bits*/
int leftRotate(int n, unsigned int d)
{
/* In n<<d, last d bits are 0. To put first 3 bits of n at 
	last, do bitwise or of n<<d with n >>(INT_BITS - d) */
return (n << d)|(n >> (INT_BITS - d));
}

/*Function to right rotate n by d bits*/
int rightRotate(int n, unsigned int d)
{
/* In n>>d, first d bits are 0. To put last 3 bits of at 
	first, do bitwise or of n>>d with n <<(INT_BITS - d) */
return (n >> d)|(n << (INT_BITS - d));
}

/* Driver program to test above functions */
int main()
{
int n = 16;
int d = 2;
printf("Left Rotation of %d by %d is ", n, d);
printf("%d", leftRotate(n, d));
printf("\nRight Rotation of %d by %d is ", n, d);
printf("%d", rightRotate(n, d));
getchar();
} 


how to find the min or max of two numbers ?

Method1:
/* The obvious approach to find minimum (involves branching) */
int min(int x, int y)
{
  return (x < y) ? x : y
}

/* The obvious approach to find minimum (involves branching) */
int max(int x, int y)
{
  return (x > y) ? x : y
}

Method 2:
It works because if x < y, then -(x < y) will be all ones, 
so r = y ^ (x ^ y) & ~0 = y ^ x ^ y = x. Otherwise, if x >= y, 
then -(x < y) will be all zeros, so r = y ^ ((x ^ y) & 0) = y.
def min(x, y):
 
    return y ^ ((x ^ y) & -(x < y))
 
 
# Function to find maximum of x and y
def max(x, y):
 
    return x ^ ((x ^ y) & -(x < y)) 
	

how to swap two variables by bitwise operators ?
/* Code to swap two numbers using bitwise operator */
void swap(int *x, int *y)
{
    *x = *x ^ *y;
    *y = *x ^ *y;
    *x = *x ^ *y;
}

how Check whether K-th bit is set or not ?
Below are simple steps to find value of k-th bit

1) Left shift given number 1 by k-1 to create 
   a number that has only set bit as k-th bit.
    temp = 1 << (k-1)
2) If bitwise AND of n and temp is non-zero, 
   then result is SET else result is NOT SET.

void isKthBitSet(int n, int k)
{
    if (n & (1 << (k-1)))
        printf(The kth bit is set);
    else
        printf(The kth bit is set);
}



how Check whether K-th bit is set or not ?
Below are simple steps to find value of k-th bit

1) Left shift given number 1 by k-1 to create 
   a number that has only set bit as k-th bit.
    temp = 1 << (k-1)
2) Do bitwise  xor to toggle the bit

void toggleKthBit(int n, int k)
{
    (n  ^ (1 << (k-1)));   
    
}

how to toggle the bits in the given range ?
Given a non-negative number n and two values l and r. The problem is to toggle 
the bits in the range l to r in the binary representation of n, i.e, to toggle 
bits from the rightmost lth bit to the rightmost rth bit. A toggle operation 
flips a bit 0 to 1 and a bit 1 to 0.

1. Calculate num = ((1 << r) – 1) ^ ((1 << (l-1)) – 1). This will produce a number 
num having r number of bits and bits in the range l to r are the only set bits.
2. Now, perform n = n ^ num. This will toggle the bits in the range l to r in n.

unsigned int toggleBitsFromLToR(unsigned int n,unsigned int l, unsigned int r)
{
    // calculating a number 'num' having 'r'
    // number of bits and bits in the range l
    // to r are the only set bits
    int num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1);
 
    // toggle bits in the range l to r in 'n'
    // and return the number
    return (n ^ num);
}


How to find if the number is a power of 2 ?
Method1:
keep dividing the number by two, i.e, do n = n/2 iteratively. In any iteration, 
if n%2 becomes non-zero and n is not 1 then n is not a power of 2. If n becomes
1 then it is a power of 2.
#include<stdio.h>
#include<stdbool.h>
 
/* Function to check if x is power of 2*/
bool isPowerOfTwo(int n)
{
  if (n == 0)
    return 0;
  while (n != 1)
  {
      if (n%2 != 0)
         return 0;
      n = n/2;
  }
  return 1;
}
 
/*Driver program to test above function*/
int main()
{
  isPowerOfTwo(31)? printf("Yes\n"): printf("No\n");
  isPowerOfTwo(64)? printf("Yes\n"): printf("No\n");
  return 0;
}
Metod2:
All power of two numbers have only one bit set. 
If we subtract a power of 2 numbers by 1 then all unset bits after the only set
bit become set; and the set bit become unset.
So, if a number n is a power of 2 then bitwise & of n and n-1 will be zero.

#include<stdio.h>
#define bool int
 
/* Function to check if x is power of 2*/
bool isPowerOfTwo (int x)
{
  
  if (x == 0)
	return 0;

  return (!(x&(x-1)));
}
 



How to Make Single-Threaded Code to Multithreaded ?
Refre Tanen Balm

If mutex creates overhead because of big critical section, how to solve it?
Refre Tanen balm


can we return a static pointer from a function ?
Yes we can return static pointer from a function , but this makes the function non-reentrant.

     

where are string literals stored in C ?

When strings are declared as character arrays, they are stored like other types 
of arrays in C. For example, if str[] is an auto variable then string is stored 
in stack segment, if it’s a global or static variable then stored in data segment, etc.

When string value is directly assigned to a pointer, in most of the compilers, 
it’s stored in a read only block (generally in data segment) that is shared among functions.


Explain the memory segment of a C program ?
A typical memory representation of C program consists of following sections.

1. Text segment
2. Initialized data segment
3. Uninitialized data segment
4. Stack
5. Heap

1. Text Segment:
A text segment , also known as a code segment or simply as text, is one of the sections of a program in an object file or in memory, which contains executable instructions.

As a memory region, a text segment may be placed below the heap or stack in order to prevent heaps and stack overflows from overwriting it.

Usually, the text segment is sharable so that only a single copy needs to be in memory for frequently executed programs, such as text editors, the C compiler, the shells, and so on. Also, the text segment is often read-only, to prevent a program from accidentally modifying its instructions.

2. Initialized Data Segment:
Initialized data segment, usually called simply the Data Segment. A data segment is a portion of virtual address space of a program, which contains the global variables and static variables that are initialized by the programmer.

Note that, data segment is not read-only, since the values of the variables can be altered at run time.

This segment can be further classified into initialized read-only area and initialized read-write area.

For instance the global string defined by char s[] = “hello world” in C and a C statement like int debug=1 outside the main (i.e. global) would be stored in initialized read-write area. And a global C statement like const char* string = “hello world” makes the string literal “hello world” to be stored in initialized read-only area and the character pointer variable string in initialized read-write area.

Ex: static int i = 10 will be stored in data segment and global int i = 10 will also be stored in data segment

3. Uninitialized Data Segment:
Uninitialized data segment, often called the “bss” segment, named after an ancient assembler operator that stood for “block started by symbol.” Data in this segment is initialized by the kernel to arithmetic 0 before the program starts executing

uninitialized data starts at the end of the data segment and contains all global variables and static variables that are initialized to zero or do not have explicit initialization in source code.

For instance a variable declared static int i; would be contained in the BSS segment.
For instance a global variable declared int j; would be contained in the BSS segment.

4. Stack:
The stack area traditionally adjoined the heap area and grew the opposite direction; when the stack pointer met the heap pointer, free memory was exhausted. (With modern large address spaces and virtual memory techniques they may be placed almost anywhere, but they still typically grow opposite directions.)

The stack area contains the program stack, a LIFO structure, typically located in the higher parts of memory. On the standard PC x86 computer architecture it grows toward address zero; on some other architectures it grows the opposite direction. A “stack pointer” register tracks the top of the stack; it is adjusted each time a value is “pushed” onto the stack. The set of values pushed for one function call is termed a “stack frame”; A stack frame consists at minimum of a return address.

Stack, where automatic variables are stored, along with information that is saved each time a function is called. Each time a function is called, the address of where to return to and certain information about the caller’s environment, such as some of the machine registers, are saved on the stack. The newly called function then allocates room on the stack for its automatic and temporary variables. This is how recursive functions in C can work. Each time a recursive function calls itself, a new stack frame is used, so one set of variables doesn’t interfere with the variables from another instance of the function.

5. Heap:
Heap is the segment where dynamic memory allocation usually takes place.

The heap area begins at the end of the BSS segment and grows to larger addresses from there.The Heap area is managed by malloc, realloc, and free, which may use the brk and sbrk system calls to adjust its size (note that the use of brk/sbrk and a single “heap area” is not required to fulfill the contract of malloc/realloc/free; they may also be implemented using mmap to reserve potentially non-contiguous regions of virtual memory into the process’ virtual address space). The Heap area is shared by all shared libraries and dynamically loaded modules in a process.



Why STructure padding is required in C ?
In order to align the data in  memory,  one or more empty bytes (addresses) are inserted (or left  empty)
between memory addresses which are allocated for other structure  members while memory allocation. This concept is called structure  padding.

Architecture of a computer processor is such a way that it can read 1 word (4 byte in 32 bit processor) from memory at a time.


what are the uses of function pointers ?
1. To implement callbacks
2. Finite State Machines




Opearting System Concepts 

Processes
what is a process ?
A process is an instance of an executing program including
the current values of the program counter, registers, and variables

What is a Thread? 
A thread is a sequence of instructions within a process that can be managed
by a scheduler.

what is the difference between process and thread ?
1. processes exists independently, while threads exist as subsets of a process
2. threads shares with other threads their code section, data section(global, global static and local static variables), heap
   and OS resources like open files and signals
3. But, like process, a thread has its own program counter (PC), 
   a register set, and a stack space.
   

   
When we should use threads in our application ?
1. Offloading a batch of work to a worker thread so your program can either 
   continue responding to user input or so you can carry on running other code
   that doesn't rely on that work.
2. Handling I/O particularly server and network communication where the response
   time is variable or unknown.
3. Parallel processing of data where you can sub-divide the work down into 
   discrete non-dependant units of work
4. Timer related work i.e 'every 500ms check if x has changed'
5. when we are using Multicore machines.


what are the types of threads ?
1. User level threads - User managed threads.
2. kernel level threads âˆ’ Operating System managed threads acting on kernel, an operating system core.

There are four principal events that cause processes to be created:
1. System initialization.
2. Execution of a process creation system call by a running process.
3. A user request to create a new process.

Events that trigger process termination
1. Normal exit (voluntary).
2. Error exit (voluntary).
3. Fatal error (involuntary).
4. Killed by another process (involuntary).

How a process is created in Linux?
In UNIX, there is only one system call to create a new process: fork. This call
creates an exact clone of the calling process. After the fork, the two processes, the
parent and the child, have the same memory image, the same environment strings,
and the same open files.Usually, the child process then executes
execve or a similar system call to change its memory image and run a new
program.

what are the different states of a process ?
1. Running (actually using the CPU at that instant).
2. Ready (runnable; temporarily stopped to let another process run).
3. Blocked (unable to run until some external event happens).


what are the basic p thread calls ?
Pthread_create - Create a new thread
Pthread_exit - Terminate the calling thread
Pthread_join - Wait for a specific thread to exit
Pthread_yieid - Release the CPU to let another thread run
Pthread_attr_init - Create and initialize a thread's attribute structure
Pthread_attr_destroy - Remove a thread's attribute structure


Analysis of Time Complexity 
https://www.geeksforgeeks.org/analysis-of-algorithms-set-4-analysis-of-loops/

Searching and Sorting
=====================










Searching Questions
====================
Given a sorted array arr[] of n elements, write a function to search a given element x in arr[].

A simple approach is to do linear search.The time complexity of above algorithm is O(n). Another approach to perform the same task is using Binary Search.

// C program to implement recursive Binary Search
#include <stdio.h>
 
// A recursive binary search function. It returns 
// location of x in given array arr[l..r] is present, 
// otherwise -1
int binarySearch(int arr[], int l, int r, int x)
{
   if (r >= l)
   {
        int mid = l + (r - l)/2;
 
        // If the element is present at the middle 
        // itself
        if (arr[mid] == x)  
            return mid;
 
        // If element is smaller than mid, then 
        // it can only be present in left subarray
        if (arr[mid] > x) 
            return binarySearch(arr, l, mid-1, x);
 
        // Else the element can only be present
        // in right subarray
        return binarySearch(arr, mid+1, r, x);
   }
 
   // We reach here when element is not 
   // present in array
   return -1;
}


Find the minimum element in a sorted and rotated array ?

A simple solution is to traverse the complete array and find minimum. This solution requires Θ(n) time.
We can do it in O(Logn) using Binary Search. If we take a closer look at above examples, we can easily figure out following pattern:

Binary Search Algorithm
-----------------------
1. The minimum element is the only element whose previous is greater than it. If there is no previous element element, then there is no rotation 
(first element is minimum). We check this condition for middle element by comparing it with (mid-1)’th and (mid+1)’th elements.
2. If minimum element is not at middle (neither mid nor mid + 1), then minimum element lies in either left half or right half.
    a. If middle element is smaller than last element, then the minimum element lies in left half
	b. Else minimum element lies in right half.
	
Program
-------
int findMin(int arr[], int low, int high)
{
    // This condition is needed to handle the case when array is not
    // rotated at all
    if (high < low)  return arr[0];
 
    // If there is only one element left
    if (high == low) return arr[low];
 
    // Find mid
    int mid = low + (high - low)/2; /*(low + high)/2;*/
 
    // Check if element (mid+1) is minimum element. Consider
    // the cases like {3, 4, 5, 1, 2}
    if (mid < high && arr[mid+1] < arr[mid])
       return arr[mid+1];
 
    // Check if mid itself is minimum element
    if (mid > low && arr[mid] < arr[mid - 1])
       return arr[mid];
 
    // Decide whether we need to go to left half or right half
    if (arr[high] > arr[mid])
       return findMin(arr, low, mid-1);
    return findMin(arr, mid+1, high);
}

Given an array of 1s and 0s which has all 1s first followed by all 0s. Find the number of 0s. Count the number of zeroes in the given array ?

A simple solution is to traverse the input array. As soon as we find a 0, we return n – index of first 0. Here n is number of elements in input array.
Time complexity of this solution would be O(n).

Since the input array is sorted, we can use Binary Search to find the first occurrence of 0. Once we have index of first element, 
we can return count as n – index of first zero.

Program
-------
/* if 0 is present in arr[] then returns the index of FIRST occurrence
   of 0 in arr[low..high], otherwise returns -1 */
int firstZero(int arr[], int low, int high)
{
    if (high >= low)
    {
        // Check if mid element is first 0
        int mid = low + (high - low)/2;
        if (( mid == 0 || arr[mid-1] == 1) && arr[mid] == 0)
            return mid;
 
        if (arr[mid] == 1)  // If mid element is not 0
            return firstZero(arr, (mid + 1), high);
        else  // If mid element is 0, but not first 0
            return firstZero(arr, low, (mid -1));
    }
    return -1;
}
 
// A wrapper over recursive function firstZero()
int countZeroes(int arr[], int n)
{
    // Find index of first zero in given array
    int first = firstZero(arr, 0, n-1);
 
    // If 0 is not present at all, return 0
    if (first == -1)
        return 0;
 
    return (n - first);
}

Smallest subarray with sum greater than a given value
TBD
Number of indexes with equal elements in given range
TBD
You are given an array of 0s and 1s in random order. Segregate 0s on left side and 1s on right side of the array. Traverse array only once ?
Method 1 (Count 0s or 1s) 
-------------------------

1) Count the number of 0s. Let count be C.
2) Once we have count, we can put C 0s at the beginning and 1s at the remaining n – C positions in array.
Time Complexity : O(n)

// Function to segregate 0s and 1s
void segregate0and1(int arr[], int n)
{
    int count = 0; // Counts the no of zeros in arr
 
    for (int i = 0; i < n; i++) {
        if (arr[i] == 0)
            count++;
    }
 
    // Loop fills the arr with 0 until count
    for (int i = 0; i < count; i++)
        arr[i] = 0;
 
    // Loop fills remaining arr space with 1
    for (int i = count; i < n; i++)
        arr[i] = 1;
}


Method2:
--------
Maintain two indexes. Initialize first index left as 0 and second index right as n-1.

Do following while left < right
a) Keep incrementing index left while there are 0s at it
b) Keep decrementing index right while there are 1s at it
c) If left < right then exchange arr[left] and arr[right]


/*Function to put all 0s on left and all 1s on right*/
void segregate0and1(int arr[], int size)
{
    /* Initialize left and right indexes */
    int left = 0, right = size-1;
 
    while (left < right)
    {
        /* Increment left index while we see 0 at left */
        while (arr[left] == 0 && left < right)
            left++;
 
        /* Decrement right index while we see 1 at right */
        while (arr[right] == 1 && left < right)
            right--;
 
        /* If left is smaller than right then there is a 1 at left
          and a 0 at right.  Exchange arr[left] and arr[right]*/
        if (left < right)
        {
            arr[left] = 0;
            arr[right] = 1;
            left++;
            right--;
        }
    }


Find the first repeating/non-repeating element in a given array of integers ?



Method1
--------
A Simple Solution is to use two loops. The outer loop picks elements one by one and inner loop checks if the element is present more than once or not.
int firstNonRepeating(int arr[], int n)
{
    for (int i = 0; i < n; i++) {
        int j;
        for (j=0; j<n; j++)
            if (i != j && arr[i] == arr[j])
                break;
        if (j == n)
            return arr[i];
    }
    return -1;
}



Method2:
-------
An Efficient Solution is to use hashing.
1) Traverse array and insert elements and their counts in hash table.
2) Traverse array again and print first element with count equals to 1.

int firstNonRepeating(int arr[], int n)
{
    // Insert all array elements in hash
    // table
    unordered_map<int, int> mp;
    for (int i = 0; i < n; i++) 
       mp[arr[i]]++;
 
    // Traverse array again and return
    // first element with count 1.
    for (int i = 0; i < n; i++) 
       if (mp[arr[i]] == 1)
            return arr[i];
    return -1;
}
 



Segregate Even and Odd numbers ?
The problem is very similar to our old post Segregate 0s and 1s in an array.

Algorithm: segregateEvenOdd()
-----------------------------
1) Initialize two index variables left and right:  
            left = 0,  right = size -1 
2) Keep incrementing left index until we see an odd number.
3) Keep decrementing right index until we see an even number.
4) If left < right then swap arr[left] and arr[right]

Program
-------

/* Function to swap *a and *b */
void swap(int *a, int *b);
 
void segregateEvenOdd(int arr[], int size)
{
    /* Initialize left and right indexes */
    int left = 0, right = size-1;
    while (left < right)
    {
        /* Increment left index while we see 0 at left */
        while (arr[left]%2 == 0 && left < right)
            left++;
 
        /* Decrement right index while we see 1 at right */
        while (arr[right]%2 == 1 && left < right)
            right--;
 
        if (left < right)
        {
            /* Swap arr[left] and arr[right]*/
            swap(&arr[left], &arr[right]);
            left++;
            right--;
        }
    }
}
 
/* UTILITY FUNCTIONS */
void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}


A Product Array Puzzle
TBD
Union and Intersection of two sorted arrays ?

Algorithm
---------
1) Use two index variables i and j, initial values i = 0, j = 0
2) If arr1[i] is smaller than arr2[j] then print arr1[i] and increment i.
3) If arr1[i] is greater than arr2[j] then print arr2[j] and increment j.
4) If both are same then print any of them and increment both i and j.
5) Print remaining elements of the larger array.

Program
-------

/* Function prints union of arr1[] and arr2[]
   m is the number of elements in arr1[]
   n is the number of elements in arr2[] */
int printUnion(int arr1[], int arr2[], int m, int n)
{
  int i = 0, j = 0;
  while (i < m && j < n)
  {
    if (arr1[i] < arr2[j])
       cout << arr1[i++] << " ";
     
    else if (arr2[j] < arr1[i])
       cout << arr2[j++] << " ";
     
    else
    {
       cout << arr2[j++] << " ";
       i++;
    }
  }
 
  /* Print remaining elements of the larger array */
  while(i < m)
     cout << arr1[i++] << " ";
 
  while(j < n)
    cout << arr2[j++] << " ";
}
 





Union and Intersection of two sorted arrays?
Algorithm
---------
1. Sort  both the arrays
2. use the above function 

Minimum swaps required to Sort Binary array
TBD
Delete array elements which are smaller than next or become smaller

sample I/O
----------

Input       : arr[] = {20, 10, 25, 30, 40}
              k = 2
Output      : 25 30 40
Explanation : First we delete 10 because it follows
              arr[i] < arr[i+1]. Then we delete 20
              because 25 is moved next to it and it
              also starts following the condition.

Input       : arr[] = { 23, 45, 11, 77, 18}
              k = 3
Output      : 77, 18
Explanation : We delete 23, 45 and 11 as they follow  
              the condition arr[i] < arr[i+1]
			  
			  
Algorithm
---------

Stack is used to solving this problem. 
First we push arr[0] in stack S and then initialize count as 0, 
then after traverse a loop from 1 to n and then we check that s.top() > arr[i] if condition is true then we pop the element from stack and increase
the count if count == k then we stop the loop and then store the value of stack in another array and then print that array.
			  
Program
-------
// Function for deleting k elements
void deleteElements(int arr[], int n, int k)
{ 
    // Create a stack and push arr[0]
    stack<int> s;
    s.push(arr[0]);
 
    int count = 0;
     
    // traversing a loop from i = 1 to n
    for (int i=1; i<n; i++) {
         
        // condition for deleting an element
        while (!s.empty() && s.top() < arr[i] 
                            && count < k) {                                     
            s.pop();
            count++;
        }
         
        s.push(arr[i]);
    }
     
    // Putting elements of stack in a vector
    // from end to begin.
    int m = s.size();
    vector<int> v(m); // Size of vector is m
    while (!s.empty()) {
         
        // push element from stack to vector v
        v[--m] = s.top();
        s.pop();
    }
     
    // printing result
    for (auto x : v)
        cout << x << " ";
         
    cout << endl;
}
 
// Driver code
int main()
{
    int n = 5, k = 2;
    int arr[] = {20, 10, 25, 30, 40}; 
    deleteElements(arr, n, k);
    return 0;
}
		  


Given an unsorted array of size n. Array elements are in range from 1 to n. One number from set {1, 2, …n} is missing and one number occurs twice in array.
Find these two numbers.?

Method 1 (Use Sorting)
---------------------
1) Sort the input array.
2) Traverse the array and check for missing and repeating.
Time Complexity: O(nLogn)

Method 2 (Use elements as Index and mark the visited places)
------------------------------------------------------------
Traverse the array.
While traversing, use absolute value of every element as index and make the value at this index as negative to mark it visited. 
If something is already marked negative then this is the repeating element. To find missing, traverse the array again and look for a positive value.

Program
--------
#include<stdio.h>
#include<stdlib.h>
 
void printTwoElements(int arr[], int size)
{
    int i;
    printf("\n The repeating element is");
 
    for(i = 0; i < size; i++)
    {
        if(arr[abs(arr[i])-1] > 0)
            arr[abs(arr[i])-1] = -arr[abs(arr[i])-1];
        else
            printf(" %d ", abs(arr[i]));
    }
 
    printf("\nand the missing element is ");
    for(i=0; i<size; i++)
    {
        if(arr[i]>0)
            printf("%d",i+1);
    }
}
 
/* Driver program to test above function */
int main()
{
    int arr[] = {7, 3, 4, 5, 5, 6, 2};
    int  n = sizeof(arr)/sizeof(arr[0]);
    printTwoElements(arr, n);
    return 0;
}



Find the kth largest/smallest elements in an array

Method 1(Use Sorting)
=====================
1) Sort the elements in descending/ascending order in O(nLogn)
2) Print the first k numbers of the sorted array O(k).

Method2 (Use Max/MinHeap)
-------------------------

1) Build a Max/Min Heap tree in O(n)
2) Use Extract Max k times to get k maximum/minimum elements from the Max/Min Heap O(klogn)

Time complexity: O(n + klogn)




Find the max and min of an array ?

METHOD 1 (Simple Linear Search)
-------------------------------
Algorithm
----------
Initialize values of min and max as minimum and maximum of the first two elements respectively. Starting from 3rd, compare each element with max and min,
and change max and min accordingly (i.e., if the element is smaller than min then change min, else if the element is greater than max then change max,
else ignore the element)


Program
-------
#include<stdio.h>
struct pair 
{
  int min;
  int max;
};  
 
struct pair getMinMax(int arr[], int n)
{
  struct pair minmax;     
  int i;
   
  /*If there is only one element then return it as min and max both*/
  if (n == 1)
  {
     minmax.max = arr[0];
     minmax.min = arr[0];     
     return minmax;
  }    
 
  /* If there are more than one elements, then initialize min 
      and max*/
  if (arr[0] > arr[1])  
  {
      minmax.max = arr[0];
      minmax.min = arr[1];
  }  
  else
  {
      minmax.max = arr[1];
      minmax.min = arr[0];
  }    
 
  for (i = 2; i<n; i++)
  {
    if (arr[i] >  minmax.max)      
      minmax.max = arr[i];
   
    else if (arr[i] <  minmax.min)      
      minmax.min = arr[i];
  }
   
  return minmax;
}
 
/* Driver program to test above function */
int main()
{
  int arr[] = {1000, 11, 445, 1, 330, 3000};
  int arr_size = 6;
  struct pair minmax = getMinMax (arr, arr_size);
  printf("nMinimum element is %d", minmax.min);
  printf("nMaximum element is %d", minmax.max);
  getchar();
}  

Method2 (Use Max and MinHeap)
-------------------------

1) Build a Max and Min Heap tree in O(n)
2) Use Extract Max 1 time to get k maximum element from the Max Heap O(klogn)
3) Use Extract Min 1 time to get k minimum element from the Mim Heap O(klogn)

Time complexity: O(n + klogn)

Sorting Questions
=================
Sorting array except elements in a subarray
Sorting all array elements except one


